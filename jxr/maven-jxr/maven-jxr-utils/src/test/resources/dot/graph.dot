

Converts path and classpath information to a specific target OS
 format. The resulting formatted path is placed into the specified property.Ant 1.4
category="utility"





constructor


Create a nested PATH element





Create a nested MAP elementa Map to configure






Set targetos to a platform to one of
 "windows", "unix", "netware", or "os/2".

 Required unless unless pathsep and/or dirsep are specified.use the method taking a TargetOs argument instead
#setTargetos(PathConvert.TargetOs)









Set targetos to a platform to one of
 "windows", "unix", "netware", or "os/2"; required unless
 unless pathsep and/or dirsep are specified.Ant 1.5









Set setonempty

 If false, don't set the new property if the result is the empty string.setonempty true or false
Ant 1.5









The property into which the converted path will be placed.








The file into which the converted path will be written.








The type of output into which the converted path will be placed.
 Can be <code>plain</core> or <code>xml</code>








Adds a reference to a Path, FileSet, DirSet, or FileList defined
 elsewhere.








Set the default path separator string;
 defaults to current JVM
 {@link java.io.File#pathSeparator File.pathSeparator}sep path separator string









Set the default directory separator string;
 defaults to current JVM {@link java.io.File#separator File.separator}sep directory separator string









Has the refid attribute of this element been set?true if refid is valid






Do the execution.BuildException if something is invalid









Helper class, holds the nested &lt;map&gt; values. Elements will look like
 this: &lt;map from=&quot;d:&quot; to=&quot;/foo&quot;/&gt;

 When running on windows, the prefix comparison will be case
 insensitive.





the prefix string to search for; required.
 Note that this value is case-insensitive when the build is
 running on a Windows platform and case-sensitive when running on
 a Unix platform.from









The replacement text to use when from is matched; required.to new prefix









Apply this map entry to a given path elementelem Path element to process
String Updated path element after mapping










an enumeration of supported targets:
 windows", "unix", "netware", and "os/2".












Helper class, holds the nested &lt;map&gt; values. Elements will look like
 this: &lt;map from=&quot;d:&quot; to=&quot;/foo&quot;/&gt;

 When running on windows, the prefix comparison will be case
 insensitive.





the prefix string to search for; required.
 Note that this value is case-insensitive when the build is
 running on a Windows platform and case-sensitive when running on
 a Unix platform.from









The replacement text to use when from is matched; required.to new prefix









Apply this map entry to a given path elementelem Path element to process
String Updated path element after mapping










an enumeration of supported targets:
 windows", "unix", "netware", and "os/2".











DOT attr_stmt type.

























get type instance.








get attr_stmt type (node|graph|edge).











&lt;attr&gt; nested element handler. &lt;attr&gt; represents an
 attribute in the DOT language.





Set the name of this attirubte.








Set the value of this attirubte.








Get the name of this attribute.





Get the value of this attribute.











&lt;attrstmt&gt; nested element handler. &lt;attrstmt&gt; represents
 attr_stmt in <a href="http://www.research.att.com/~erg/graphviz/info/lang.html" target="_blank">the DOT language</a>.





set attribute statement type.








get attribute statement type.





add &lt;attr&gt; nested element.








add attribute.








add attribute.name  Name of the attribute.
value Value of the attribute.












add attribute(s) from the other attrstmt.








get attributes as Enumeration.
















A class to print xml graph of dependencies.





add a project which will be printed.





















































print indent + string.








print indent + string + line break.








add attributesattrstmt attribute statement









add subgraph attributesattrstmt attribute statement









add attributes to the attribute table.map      attribute table
attrstmt attribute statement






















































































































Ant project.


































































An implementation of VizProjectLoader.






















































Target dependency.



































































&lt;subgraph&gt; nested element handler.






















Ant target.


























































































Vizant task.





















































































































































































































Main Doclet class to generate JavaDocXML.  This doclet generates the
 document conforming to DTD specified in javadoc-v04draft.dtd.$Id: $



















Class HTMLOutputWriter$Id: $





Constructor HTMLOutputWriteroutput






Method writeHTMLc
IOException












Method writeHTMLs
IOException













Runs the javasrc converter as a task inside
 the well known build tool "ant" (see ant.apache.org).<a href="http://ant.apache.org">http://ant.apache.org</a>
$Id: $





Constructor for JavaSrcTask.


Returns the directory where the Java sources are stored.String directory name






Sets the directory where the Java sources are stored.javaDir directory name









Returns the directory where the HTML output is written.String directory name






Sets the directory where the HTML output is written.htmlDir directory name










BuildException
org.apache.tools.ant.Task#execute()









Method getRecurse





Method setRecurserecurse









Method getTitle





Method setTitletitle









Method getVerbose





Method setVerboseverbose










Class LineOutputWriter$Id: $





Field MAXCOLS



The max number of line number digits.
 Sadly, the pipe pattern doesn't let us use the real value
 discovered at runtime.
 No class file should have more than 9999 lines anyway.



Constructor LineOutputWriteroutput







java.io.OutputStreamWriter#write(int)










org.apache.forrest.forrestdoc.java.src.HTMLOutputWriter#writeHTML(int)










java.io.Writer#write(java.lang.String)










org.apache.forrest.forrestdoc.java.src.HTMLOutputWriter#writeHTML(java.lang.String)









Method writeLineNumberIOException










Class Pass1$Id: $








Field DEFAULT_DIR



Field USAGE



Constructor Pass1


Method getOutDir





Method setOutDird









Method getTitle





Method setTitlet









Method getRecurse





Method setRecurserecurse









Method setVerboseverbose









Method getVerbose






org.apache.forrest.forrestdoc.java.src.xref.FileListener#notify(java.lang.String)









Method runargs









Method initializeDefaults





Method createDirsf









Method getBackupPathtagList
element












Returns the path to the top level of the source hierarchy from the files
 og\f a given class.packageName the package to get the backup path for
the path from the package to the top level, as a string









Method createClassFiletagList
element
IOException















Method finishFileinput
output
IOException















Method writeUntilNextTagt
input
output
IOException


















Method writeCommentt
input
output
IOException


















Method writeHTMLTagt
input
output
IOException


















Method createClassFilestagList









Method mainargs










Cross-reference generation pass.
 <p/>
 For each package (= for each output directory):
 Load reference.txt
 Sort references
 Generate HTML one public class at a time.$Id: $





Field DEFAULT_DIR



Field USAGE



Constructor Pass2


Method getOutDir





Method setOutDird









Method getTitle





Method setTitlet









Method getVerbose





Method setVerboseval









Method runargs
IOException












Method initializeDefaults





Method mainargs
Exception













Definition of a curly-brace-delimited block in a file.$Id: $






org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateTags(org.apache.forrest.forrestdoc.java.src.symtab.HTMLTagContainer)










org.apache.forrest.forrestdoc.java.src.symtab.ScopedDef#getOccurrenceTag(org.apache.forrest.forrestdoc.java.src.symtab.Occurrence)










Definition of a Java class OR interface
 These are merged together because there are places where we just don't
 know if something is an interface or class (because we are not looking
 at the classes/interfaces that are imported.)$Id: $








Field packageName



Default constructor needs to be public for deserialization.


Method findLoadedClasspackageName
name












Return the list of interfaces that this class implements
 (or the interfaces that this interface extends)





Return a reference to the superclass of this class





Does this represent a Java class?





Does this represent a Java interface?






org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateReferences(java.io.FileWriter)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateTags(org.apache.forrest.forrestdoc.java.src.symtab.HTMLTagContainer)










org.apache.forrest.forrestdoc.java.src.symtab.ScopedDef#getOccurrenceTag(org.apache.forrest.forrestdoc.java.src.symtab.Occurrence)









Method generateClassListtagList










java.io.Externalizable#writeExternal(java.io.ObjectOutput)










java.io.Externalizable#readExternal(java.io.ObjectInput)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#accept(org.apache.forrest.forrestdoc.java.src.symtab.Visitor)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#toString()







Class ClassDefProxy$Id: $








Default constructor is public for deserialization.


Constructor ClassDefProxyref







org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#getSuperClass()







org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#isClass()







org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#isInterface()






Method getOccurenceTagocc










org.apache.forrest.forrestdoc.java.src.symtab.Definition#getSourceName()







org.apache.forrest.forrestdoc.java.src.symtab.Definition#getRefName()







org.apache.forrest.forrestdoc.java.src.symtab.Definition#getOccurrence()







org.apache.forrest.forrestdoc.java.src.symtab.Definition#getParentScope()







org.apache.forrest.forrestdoc.java.src.symtab.Definition#getPackagePath()







org.apache.forrest.forrestdoc.java.src.symtab.Definition#getReferences()







org.apache.forrest.forrestdoc.java.src.symtab.ScopedDef#getSymbols()







org.apache.forrest.forrestdoc.java.src.symtab.ScopedDef#getElements()







org.apache.forrest.forrestdoc.java.src.symtab.ScopedDef#isDefaultOrBaseScope()







org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#getImplementers()







org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#generateReferences(java.io.FileWriter)










org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#generateTags(org.apache.forrest.forrestdoc.java.src.symtab.HTMLTagContainer)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#addReference(org.apache.forrest.forrestdoc.java.src.symtab.Occurrence)










org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#accept(org.apache.forrest.forrestdoc.java.src.symtab.Visitor)










org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#writeExternal(java.io.ObjectOutput)










org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#readExternal(java.io.ObjectInput)










An occurrence of an HTML Tag in a file$Id: $








Method getKey





Method getTag






java.lang.Object#toString()







org.apache.forrest.forrestdoc.java.src.util.JSComparable#compareTo(java.lang.Object)










This abstract class represents a symbol definition in a Java source file.
 All symbols used in our Java symbol table stem from this definition.$Id: $









Default constructor is public for deserialization.


Method getSourceName





Method getRefName





Method setupFileNames





Subclasses override this method to create tags for references to this definitionocc









Set the basic name of this symbolname









Get the basic name of the symbol





Get the information about where the symbol was defined





Method setOccurrencedefinition









Get the symbol that contains the definition of this symbol





Get the fully-qualified name of the symbol
 Keep building the name by recursively calling the parentScope's
 getQualifiedName() method...





Method getPackagePath





return a String representation of this class for printing






org.apache.forrest.forrestdoc.java.src.symtab.Taggable#generateTags(org.apache.forrest.forrestdoc.java.src.symtab.HTMLTagContainer)









Default implementation of accept method (Visitor design pattern).visitor









generateReferencesoutput









Determine whether this is an instance of exactly the specified Class.o the object in question
c a Class object or null.  If null, always returns true.










java.lang.Object#toString()







A stub symbol that is used to temporarily hold the name of a class
 until it can be properly resolved$Id: $








Constructor to create a placeholder class object
 This version provides a means to set the package containing the class


Constructor to create a placeholder class objectname
occ









Constructor to create a placeholder class object
 This version provides a means to set the package containing the classname
occ
packageName












Get the name of the package in which this class is defined






org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#generateTags(org.apache.forrest.forrestdoc.java.src.symtab.HTMLTagContainer)










org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#writeExternal(java.io.ObjectOutput)










org.apache.forrest.forrestdoc.java.src.symtab.ClassDef#readExternal(java.io.ObjectInput)










An occurrence of an HTML Tag in a file$Id: $




















Method getLine





Method getStartColumn





Method getEndColumn





Method getFile





Method getText





Method getPackageName





Method getLength





Method isComment





Method isLiteral





Method isKeyword





Method getNumBreaks





Method getOrigLength






java.lang.Object#toString()







org.apache.forrest.forrestdoc.java.src.util.JSComparable#compareTo(java.lang.Object)










HTMLTagContainer contains a mapping from files to lists of HTMLTags.$Id: $





Constructor HTMLTagContainer


Method getFileTable





Method elements





Method addElementt










An extended Vector class to provide simple lookup and type resolution
 methods$Id: $








Constructor to create a new Java vector


Add a new element to the vector (used for debugging)o









get an element from thename









Resolve references that are stored as JavaTokenssymbolTable









Resolve the types of dummy elements in the vectorsymbolTable










java.io.Externalizable#writeExternal(java.io.ObjectOutput)










java.io.Externalizable#readExternal(java.io.ObjectInput)









Visitor design pattern.  Call accept method of each
 element.visitor










A definition of a method in a class$Id: $









Default constructor needs to be public for deserialization.


Method getParameters





Method getExceptions





Method getClassName






org.apache.forrest.forrestdoc.java.src.symtab.TypedDef#getType()







org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateReferences(java.io.FileWriter)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateTags(org.apache.forrest.forrestdoc.java.src.symtab.HTMLTagContainer)










org.apache.forrest.forrestdoc.java.src.symtab.ScopedDef#getOccurrenceTag(org.apache.forrest.forrestdoc.java.src.symtab.Occurrence)










java.io.Externalizable#writeExternal(java.io.ObjectOutput)










java.io.Externalizable#readExternal(java.io.ObjectInput)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#accept(org.apache.forrest.forrestdoc.java.src.symtab.Visitor)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#toString()







Because methods can be overloaded and member data can have the same name
 as a method, we provide this dummy definition to hold a list of all
 definitions in a scope with the same name.$Id: $






org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateTags(org.apache.forrest.forrestdoc.java.src.symtab.HTMLTagContainer)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateReferences(java.io.FileWriter)









Method getDefs






org.apache.forrest.forrestdoc.java.src.symtab.Definition#getOccurrenceTag(org.apache.forrest.forrestdoc.java.src.symtab.Occurrence)










An occurrence of an indentifier in a file$Id: $








Default constructor is public for serialization


Method getLine





Method getColumn





Method getFile





Method getPackageName





Method getClassName





Method getMethodName





Method getDefinition





Method setPackageNamepackageName









Method setClassNameclassName









Method setMethodNamemethodName









Method setDefinitiondef









Method getOccurrenceTag





Method getLinkReference





return a string representation of the occurrence






java.lang.Object#toString()







java.io.Externalizable#writeExternal(java.io.ObjectOutput)










java.io.Externalizable#readExternal(java.io.ObjectInput)










Definition of a package.$Id: $








Method getDefinitions





Method persistDefinitionspath









Method persistReferencespath










org.apache.forrest.forrestdoc.java.src.symtab.Definition#accept(org.apache.forrest.forrestdoc.java.src.symtab.Visitor)









Method generateClassList






org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateTags(org.apache.forrest.forrestdoc.java.src.symtab.HTMLTagContainer)










org.apache.forrest.forrestdoc.java.src.symtab.ScopedDef#getOccurrenceTag(org.apache.forrest.forrestdoc.java.src.symtab.Occurrence)









Method loadClassDefname










org.apache.forrest.forrestdoc.java.src.symtab.Definition#toString()







A visitor (in the Visitor design pattern sense) for persisting
 references.  All references to anything in a package are stored
 in that package's references.txt file.$Id: $










outDirPath the root of the output directory tree






Call this after traversal completes.






org.apache.forrest.forrestdoc.java.src.symtab.Visitor#visit(org.apache.forrest.forrestdoc.java.src.symtab.PackageDef)










org.apache.forrest.forrestdoc.java.src.symtab.Visitor#visit(org.apache.forrest.forrestdoc.java.src.symtab.ClassDef)










org.apache.forrest.forrestdoc.java.src.symtab.Visitor#visit(org.apache.forrest.forrestdoc.java.src.symtab.MethodDef)










org.apache.forrest.forrestdoc.java.src.symtab.Visitor#visit(org.apache.forrest.forrestdoc.java.src.symtab.VariableDef)










An abstract class representing a symbol that provides a scope that
 contains other symbols.$Id: $





A table of symbols "owned" by this symbol



Default constructor is public for deserialization.


Method getSymbols





Return whether or not this scope actually contains any elements





Return if this is a base or default scope.  This is used when printing
 information to the report so we won't prefix elements in these
 scopes.






org.apache.forrest.forrestdoc.java.src.symtab.Definition#getOccurrenceTag(org.apache.forrest.forrestdoc.java.src.symtab.Occurrence)










A SymbolTable object keeps track of all symbols encountered while
 parsing a file.  It's main components are a list of all packages
 that have been parsed or imported, and a stack of symbols that represent
 the syntactical scope of a source file as it is being parsed.$Id: $





Field singleton



Method getPackages





Method createReferenceTagsf
tagList












Method addFileReferenceocc









Method getCommentTagsf
tagList












Method getLiteralTagsf
tagList












Method getKeywordTagsf
tagList












Method getImports





Method setImportsimp









Method getDemand





Method setDemanddem









Method getSymbolTable





Method setOutDirPathoutDirPath









Method getOutDirPath





Method createDirsf









Method addFileClassDeff
classDef












Method getClassListf









Add a package that has been importedtok
className
packageName















Define a curly-brace-delimited block of codetok









Define a class objecttheClass
superClass
interfaces















Define an interface objecttheInterface
superInterfaces












Define a new label objecttheLabel









Define a new comment objectline
column
text















Define a new literal objectline
column
text















Define a new keyword objectline
column
text















Define a new method objecttheMethod
type












Define a new package object
 This is an adapter version to get the name of the package from a tokentok









create a variable definitiontheVariable
type












State that we are done processing the method headerexceptions









Create a new dummy class objecttok









Clear the scope stack (except the base scope for primitives)





Pop off the current scope from the stack





Add an unresolved reference to the current scopet









Method generatePackageTags





resolve types of anything that needs resolution in the symbol table





resolve types of anything that needs resolution in the symbol table





Method persistRefsoutDirPath









Mark the current file that is being parsedfile









set the lookup scope to the nearest enclosing class (for "this.x")






java.lang.Object#toString()






Used to push the scope of the default package.  This is used by the
 parser if the source file being parsed does not contain a package
 specification.





Method startReadExternalname









Method endReadExternal






Definition of a variable in a source file.
 This can be member data in class,
 a local variable or a method parameter.$Id: $









Default constructor needs to be public for deserialization.



org.apache.forrest.forrestdoc.java.src.symtab.TypedDef#getType()







org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateReferences(java.io.FileWriter)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#generateTags(org.apache.forrest.forrestdoc.java.src.symtab.HTMLTagContainer)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#getOccurrenceTag(org.apache.forrest.forrestdoc.java.src.symtab.Occurrence)










java.io.Externalizable#writeExternal(java.io.ObjectOutput)










java.io.Externalizable#readExternal(java.io.ObjectInput)










org.apache.forrest.forrestdoc.java.src.symtab.Definition#accept(org.apache.forrest.forrestdoc.java.src.symtab.Visitor)










Class JSCollections$Id: $






Method sortEnumerationunsortedItems









Method sortVectorunsortedItems










QuickSort - adapted from Doug Lea's Public Domain collection
 library.
 <p/>
 nicolaken@apache.org: copied it from jakarta-turbine-2 util
 package, as a quick replacement to
 the previous one that was not
 ASL compatible.$Id: $






Sort array of Objects using the QuickSort algorithm.s   An Object[].
lo  The current lower bound.
hi  The current upper bound.
cmp A Comparator to compare two elements.


















Sorts and array of objects.data An Object[].
cmp  A Comparator to compare two elements.













Class SkipCRInputStream$Id: $





Constructor SkipCRInputStreams






Constructor SkipCRInputStreams
size










java.io.BufferedInputStream#read()







Class SortableString$Id: $








Constructor SortableStrings






Method getString






org.apache.forrest.forrestdoc.java.src.util.JSComparable#compareTo(java.lang.Object)
























































































































































































































































































































































































































































































































































































A simple token that is used to relay information from the scanner to
 the parser.  We've extended it to save information about the file from
 which the token was created, and the number of parameters (telling if the
 symbol looked like a method invocation or some other symbol reference.)$Id: $





Field column



Field charNum



Field packageName



Field className



Field methodName



Constructor JavaToken


Constructor JavaTokent







antlr.CommonToken#getColumn()







antlr.CommonToken#setColumn(int)









Method getPackageName





Method setPackageNamename









Method getClassName





Method setClassNamename









Method getMethodName





Method setMethodNamename









get the File that contained the text scanned for this token





get the number of parameters for this token (if it represents a
 method invocation





Sets the file property of this tokenfile









Sets the parameter count property of this tokencount










antlr.CommonToken#toString()

















































































































































































































































































































































































A declaration is the creation of a reference or primitive-type variable
  Create a separate Type/Var tree for each var in the var list.



























































































































































Catch obvious constructor calls, but not the expr.super(...) calls















Declaration of a variable.  This can be a class/instance variable,
   or a local variable in a method
 It can also include possible initialization.














































































































































































object instantiation.
  Trees are built as illustrated by the following input/tree pairs:

  new T()

  new
   |
   T --  ELIST
           |
          arg1 -- arg2 -- .. -- argn

  new int[]

  new
   |
  int -- ARRAY_DECLARATOR

  new int[] {1,2}

  new
   |
  int -- ARRAY_DECLARATOR -- ARRAY_INIT
                                  |
                                EXPR -- EXPR
                                  |      |
                                  1      2

  new int[3]
  new
   |
  int -- ARRAY_DECLARATOR
                |
              EXPR
                |
                3

  new int[1][2]

  new
   |
  int -- ARRAY_DECLARATOR
               |
         ARRAY_DECLARATOR -- EXPR
               |              |
             EXPR             1
               |
               2





Match a, a.b.c refs, a.b.c(...) refs, a.b.c[], a.b.c[].class,
  and a.b.c.class refs.  Also this(...) and super(...).  Match
  this or super.
















Class that mounts a Document in HTML as document$Id: $






















Searches all javascript files and creates a index HTML
 with links to documentation$Id: $






















Ant task responsible for creating automatic documentation for .js files$Id: $







Task#execute()






Sets the destDir.destDir The destDir to set









Sets the jSDir.jSDir The jSDir to set



















org.apache.forrest.forrestdoc.ant.doc.VizWriter#print(java.lang.String)










org.apache.forrest.forrestdoc.ant.doc.VizWriter#println(java.lang.String)









































One
 Two
 Three
 Four













































































































































































Project loader.














































