 ------
 Introduction
 ------
 Benson Margulies
 ------
 2012-02-25
 ------

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

Maven SCM Publish Plugin

    The  maven-scm-publish-plugin is a utility plugin to allow Apache
    projects to publish Maven websites via the ASF svnpubsub 
    system, and more generally to publish a site generated by Maven or any content to
    any supported SCM. In addition to SCM operations, it takes care to
    fix newline inconsistencies generated by <<<maven-site-plugin>>>, which prevents
    simple content import to SCM.

    The plugin provides two goals: <<prepare>> and <<publish>>.
    (TODO: deprecated by publish-scm goal, which does everything in one step?) 

    The prepare goal checks out the contents of a directory from 
    the SCM into (by default) <<<target/scmpublish-checkout>>>. It 
    then lists the files known to the SCM and stores them
    in (by default) <<<target/scmpublish-inventory.js>>>. This provides
    the point of reference for an eventual SCM checkin.

    After running the prepare goal, the POM must run <<<site>>> phase then
    <<<site:stage>>> goal, with the <stagingDirectory> set to
    <<<target/scmpublish-checkout>>>.

    Finally, the <<publish>> goal compares the output of <<<site:stage>>>
    with the inventory from the <<prepare>> goal, and issues
    appropriate SCM commands to add and delete, followed by a
    checkin.

    The <scmpublish.dryRun> parameter to the <<publish>> goal avoids all 
    SCM operations, and simply logs out the added, deleted,
    and changed files.

    The <<scmpublish.skipCheckin>> parameter omits the final checkin.
    This allows you to visit <<<target/scmpublish-checkout>>>, and validate
    its contents before submitting to the SCM.

Publishing any content to SCM

    Even without any pom.xml/Maven project, you can update SCM content with
    a local content:

+-------+
mvn scm-publish:publish-scm -Dscmpublish.pubScmUrl=scm:... -Dscmpublish.content=...
+-------+

    SCM content will be checked-out to a temporary directory, then local content will
    be applied to the check-out, before it is checked-in back.

Known Limitations

    There are 2 known limitations:
    
    * <<the plugin doesn't create the initial SCM directory>>, it just updates content from an
    existing SCM directory. Then you need to manually create the empty directory first
    (with <<<svn mkdir URL>>> for example),

    * the plugin works well for multi-module websites publishing to a complete directory:
    you just need to publish <<<mvn site:stage>>> content. But if one module does not publish
    its content to the same directory (like Surefire or Enforcer, which have a
    base directory and one plugin in <<</plugins/>>>), this staging area can't be simply imported.

    []

Future Dreams

    Ideally, scm urls would be supported in <<<\<distributionManagement>>>> section of the POM, then
    publishing would simply be <<<mvn site-deploy>>>, without any problems for non-flat multi-modules
    sites.

    To reach such a dream, there are some steps:

    * fix inconsistent newlines generated by <<<maven-site-plugin>>> (caused by site.vm template and
      resources taken from skin jar without fixing newlines)

    * improve {{{/wagon/wagon-providers/wagon-scm/}<<<wagon-scm>>>}} to put a whole directory content
      in one commit, and not with one commit per file.

    []

    Then this plugin will be outdated, replaced by natural <<<maven-site-plugin>>>.
