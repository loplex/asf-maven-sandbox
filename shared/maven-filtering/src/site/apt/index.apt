 ------
 Reference
 ------
 Olivier Lamy
 ------
 2008-01-01
 ------

 ~~ Licensed to the Apache Software Foundation (ASF) under one
 ~~ or more contributor license agreements.  See the NOTICE file
 ~~ distributed with this work for additional information
 ~~ regarding copyright ownership.  The ASF licenses this file
 ~~ to you under the Apache License, Version 2.0 (the
 ~~ "License"); you may not use this file except in compliance
 ~~ with the License.  You may obtain a copy of the License at
 ~~
 ~~   http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing,
 ~~ software distributed under the License is distributed on an
 ~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~~ KIND, either express or implied.  See the License for the
 ~~ specific language governing permissions and limitations
 ~~ under the License.

Maven Filtering Component

  This Plexus components has been build with the filtering process/code coming from the maven-resources-plugin.
  
  The goal is to provide a common way for all plugins which needs to filtering resources. 
  
* Component MavenResourcesFiltering

  This component will apply filtering on a List of org.apache.maven.model.Resource. 
  
  The method without the filterWrappers parameter will interpolate the files using the default List of FileUtils.FilterWrapper (see above). 
  
  The component will not filtering some predefined file extensions (jpg,jpeg,gif,bmp,png). Note : you can easily add extra file extensions.

* Component MavenFileFilter

  This component has a method which returns the default FileUtils.FilterWrapper.
  This are :
  
    * interpolation with token $\{ \} and values from filters, project.filters, project.build.filters, pom.properties and SystemProps
    
    * interpolation with token @ @ and values from filters, project.filters, project.build.filters, pom.properties and SystemProps
    
    * interpolation with token $\{ \} and values from mavenProject interpolation
    
    []
    
    The values (Properties object) used for interpolation are loaded with the following order :
   
    * List of properties file ( the method has a parameter which accept a List of String -> path properties files )
   
    * pom.filters
    
    * pom.build.filters
    
    * pom.properties
    
    * System Properties
    
    []
    
    <<NOTE>> : As it's a Properties object, last defined key/value pair wins . 
    
    <<NOTE>> : When building the global Properties object and reading the properties files defined the different filters, 
    interpolation with the token $\{ \} is supported for this filters with a limited properties values coming from pom.properties and System Properties (last wins too)
