 ------
 Basic Usage
 ------
 Olivier Lamy
 ------
 2008-02-18
 ------

 ~~ Licensed to the Apache Software Foundation (ASF) under one
 ~~ or more contributor license agreements.  See the NOTICE file
 ~~ distributed with this work for additional information
 ~~ regarding copyright ownership.  The ASF licenses this file
 ~~ to you under the Apache License, Version 2.0 (the
 ~~ "License"); you may not use this file except in compliance
 ~~ with the License.  You may obtain a copy of the License at
 ~~
 ~~   http://www.apache.org/licenses/LICENSE-2.0
 ~~
 ~~ Unless required by applicable law or agreed to in writing,
 ~~ software distributed under the License is distributed on an
 ~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~~ KIND, either express or implied.  See the License for the
 ~~ specific language governing permissions and limitations
 ~~ under the License.

Maven Filtering Component Basic Usage

* Filtering a List of org.apache.maven.model.Resource. 
  
  Lookup the component in your Mojo
  
+-----+
  
    /**
     * @component role="org.apache.maven.shared.filtering.MavenResourcesFiltering" role-hint="default"
     * @required
     */    
    private MavenResourcesFiltering mavenResourcesFiltering;
  
+-----+

  Apply filtering on your resources List (see {{{../index.html}Reference}} to see the default FilterWrappers used).

+-----+

encoding can be null platform default will be used

nonFilteredFileExtensions : is a List of String which file extensions to not apply filtering (default List contains jpg,jpeg,gif,bmp,png)

mavenResourcesFiltering.filterResources( resources, outputDirectory, mavenProject, encoding, filtersFile, nonFilteredFileExtensions, mavenSession );

+-----+

* Adding new filtering Token

  You must use the other methods from the MavenResourcesFiltering component and construct your own List of FilterWrapper.
  The following example add the interpolation for the Token @ @ with using values coming from reflection with the Maven Project.

+-----+

MavenFileFilter mavenFileFilter = (MavenFileFilter) lookup( MavenFileFilter.class.getName(), "default" );
List defaultFilterWrappers = mavenFileFilter.getDefaultFilterWrappers( mavenProject, null, true, mavenSession );

List filterWrappers = new ArrayList( );
filterWrappers.addAll( defaultFilterWrappers );
FileUtils.FilterWrapper filterWrapper = new FileUtils.FilterWrapper()
{
    public Reader getReader( Reader reader )
    {
        ReflectionProperties reflectionProperties = new ReflectionProperties( mavenProject, true );
        return new InterpolationFilterReader( reader, reflectionProperties, "@", "@" );
    }
};
filterWrappers.add( filterWrapper );

here you can apply filtering on your resources.

encoding can be null platform default will be used

nonFilteredFileExtensions : is a List of String which file extensions to not apply filtering (default List contains jpg,jpeg,gif,bmp,png)

mavenResourcesFiltering.filterResources( resources, outputDirectory, encoding, filterWrappers,
                                         outputDirectory, nonFilteredFileExtensions, mavenSession );

+-----+
